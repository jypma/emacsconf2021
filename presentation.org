#+TITLE: Technical writing using org-mode
#+DATE:
#+PROPERTY: header-args:restclient :exports both
#+PROPERTY: header-args :eval never-export
#+latex_header: \hypersetup{colorlinks=true,linkcolor=blue}
#+options: H:2
#+LATEX_CLASS_OPTIONS: [8pt]

* Introduction
** Agenda
- Find this presentation at =https://github.com/jypma/emacsconf2021/=

- Emacs for "Technical" writing
  + Developer guide
  + API reference documentation
  + Technical presentation
  + Live demo

- A little about me, Jan Ypma
  + =jan@ypmania.net=
  + Independent software developer
  + Scala / Java, C++ (embedded), a little Rust, and of course Lisp
  + Emacs for everything

** About text editors

There are two kinds of computer programs and users:

1. The /program/ makes the /user/ conform to the /program's/ ideas (and the user does so)

2. The /user/ makes the /program/ conform to the /user's/ ideas (and the program does so)

** About free software

- Allow users to run the software for any purpose

- Allow users to study, change, and distribute it and any adapted versions

- "Free" refers to freedom, not price

** About Emacs

- Customizable text editor environment

- Written in 30% C, 70% Lisp
  + The lisp part is written to be generic and extensible

- Free software
  + 35+ year track record (GNU Emacs)
  + You control updates
  + Version controlled configuration
  + Huge community
  + Lisp is really easy to learn

- Pluggable everything
  + Which LSP mode
  + What completion framework
  + Which modal keybinding

* A tour of emacs

** This is emacs

Start a plain emacs with default configuration:

#+BEGIN_SRC sh :results none
emacs -q
#+END_SRC

** Emacs starter packs

- [[https://www.spacemacs.org/][Spacemacs]] (opinionated, tries to provide an integrated experience)
- [[https://github.com/hlissner/doom-emacs][Doom emacs]]  (more base bones)
- [[https://github.com/jypma/emacs.d][My own config]] (just as an example, please don't fork this)

- There is no one =emacs=
  + Every emacs user will have their own, unique, configuration, look, and feel
  + Tweaking and customizing is the whole point of it!

** Language servers and =lsp-mode=
*** Introduction
- /Language Server Protocol/ (LSP)
  + REST/JSON API between an editor and a language-aware back-end
  + Started by Microsoft for Visual Studio Code, but now used by tenths of editors and 100s of languages

- =lsp-mode=
  + One of two major projects implementing LSP support for emacs
  + Support out of the box for:

    ActionScript, Ada, Angular, Bash, Beancount, C++ , C++ , C# , C# , Clojure, CMake, Crystal, CSS/LessCSS/SASS/SCSS, D, Dart, Dhall, Dockerfile, Elixir, Elm, Erlang, Eslint, F#, Fortran, GDScript, Go, Grammarly, GraphQL, Groovy, Hack, HTML, Haskell, Java, Javascript/Typescript, JavaScript Flow, Json, Julia, Kotlin, LanguageTool, Lua, Markdown, MSSQL, Nginx, Nim, Ni,  OCaml , Pascal/Object Pascal, Perl, PHP , PHP , PHP , PHP ,,ershell, Prolog, PureScript, Python , Python , Python , Python,right), Python , R, Racket , Racket , Ruby, Rust , Rust , Scala, SQL , Svelte, Swift, Terraform, TeX, LaTeX, etc , TeX, LaTeX, etc , TeX, LaTeX, etc , TOML, V, Vala, Verilog/SystemVerilog , Verilog/SystemVerilog , VHDL, Vimscript, Vue 2, Vue 3, XML, YAML, Zig
*** Examples

Let's visit some code!

- Here's ZIO, a [[file:~/workspace/zio/core/shared/src/main/scala/zio/ZIO.scala][Big scala project]] (built using SBT)
- Here's a [[file:~/workspace/LB3210/demo-project/src/main/java/com/example/demoproject/DemoController.java][Java project]] (built using Maven)
- Here's some [[file:~/workspace/roomsensor8266/src/main.cpp::while (!lightMeter.measurementReady(true)) {][C++ code]] (built using =Makefile=)
** Dired
The way to view (and edit) directories in emacs

- Let's look at the directory containing this presentation (=C-x C-j=)

- We can navigate up and down in the tree

- Since this is text, we can edit the buffer as well (=C-x C-q=)

** Magit
- Manage git directly from within emacs

- Every single git feature (and more) with convenient menus and shortcuts

- Customizable to your workflow (rebasing, branching)

- Extensions
  + =forge=: Manage pull request for Github (and others)
  + [[https://github.com/charignon/github-review][github-review]]: Do code reviews for Github (and others)

** Tramp
- Treat any system with shell access as if it's local

- =sudo=, =ssh=, and chains of these
- docker
- kubernetes

- Any emacs feature will work here, e.g.

  + Dired
  + Magit
  + =lsp-mode= (if language server is installed remotely)

** Other features
- Clipboard history ("kill ring")

- Keyboard macros

- E-mail (=mu4e=)

- Youtube (=elfeed=, =youtube-dl=, =mpv=)

** Org mode

- Org Mode
  + Defines text structures for headings, list, table, code blocks and others
  + First version in 2003
  + Ideal for technical writing: API guides, code presentations, live demos

- Org Babel
  + Functionality in Org Mode to "execute" code blocks and capture results
  + Many languages supported, natively or through extensions

- You've been viewing this presentation in =org-mode=

* Demo
** Developer guide

In this section, we'll demonstrate techniques for writing a developer guide. For example, imagine setting up something that requires us to run services using [[https://docs.docker.com/compose/][docker compose]].

#+BEGIN_SRC yaml :tangle docker-compose.yml
version: '3.1'

services:
  webserver:
    image: nginx
    volumes:
      - ".:/usr/share/nginx/html:ro"
    ports:
     - "8080:80"
#+END_SRC

The above code block is automatically copied into [[file:docker-compose.yml]] when this file is tangled (using =C-c C-v t=).

We can now run a shell script to start the docker containers:

#+BEGIN_SRC sh :results output :exports both
docker-compose up -d
docker-compose ps
#+END_SRC

** Rest API Guide

Let's we're documenting a REST API. Conveniently, we have an Nginx server running on port 8080 (see previous section).

Let's make sure we have an XML file to serve up:
#+BEGIN_SRC xml :tangle test.xml
<hello>
  This is XML!
</hello>
#+END_SRC

We can make an actual REST call from within Emacs. The mode for syntax highlighting in the response is automatically taken from the =Content-Type= header, if present.

#+BEGIN_SRC restclient :exports both
GET http://localhost:8080/test.xml

#+END_SRC

Let's pretend to PUT a file (Nginx won't allow it)
#+BEGIN_SRC restclient
PUT http://localhost:8080/test.xml
Content-Type: text/xml

<hello>
  Here's some XML!
</hello>
#+END_SRC

** Presentations

- Org-mode is also very suitable for making presentations (you're looking at one!).
  + With =org-tree-slide= you can show one org heading at a time
  + Fun to use =org-babel= for live coding / API demonstrations

- Presentations can be exported:

  + As [[file:presentation-plain.pdf][plain PDF]] (=C-c C-e l p=), just like any other org file, but =restclient= blocks require some tweaking:
#+BEGIN_SRC elisp :exports none :results none :eval export
(defun my/org-export-replacements (text backend info)
  "Replace the localhost placeholder with proper production host for readers to use."
    (with-temp-buffer
      (insert text)

      (goto-char (point-min))
      (while (search-forward "{restclient}" nil t) (replace-match "{text}" nil t))

      (goto-char (point-min))
      (while (search-forward "{sgml}" nil t) (replace-match "{xml}" nil t))

      (goto-char (point-min))
      (while (search-forward "{jshell}" nil t) (replace-match "{java}" nil t))

      (buffer-substring-no-properties (point-min) (point-max))))

(make-variable-buffer-local 'org-export-filter-src-block-functions)

(add-to-list 'org-export-filter-src-block-functions
  'my/org-export-replacements)
#+END_SRC

  + As [[file:presentation-beamer.pdf][beamer PDF]] (=C-c C-e l P=), trying to make the PDF actually look like slides
    * Unfortunately, all text must be under leaf headings of the same level
    * For example, for level two, say =#+options: H:2= at the start of your org file

* Packages and configuration
  Let's go through some specific packages that help in the mentioned use cases (in addition to org and org-babel).
** Package: ox-beamer
Export org-mode documents to Latex in [[https://latex-beamer.com/quick-start/][Beamer]] style (PDF presentation handouts)

#+BEGIN_SRC elisp
(require 'ox-beamer)
#+END_SRC

** Package: doom-modeline
A prettier mode line than the default.

#+BEGIN_SRC elisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
#+END_SRC
** Package: org-superstar
Customizable way to show (or not) heading bullets in org-mode.

#+BEGIN_SRC elisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode))
#+END_SRC

** Package: restclient
Make REST calls by writing documents in Emacs.
#+BEGIN_SRC elisp
(use-package restclient
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t))))
#+END_SRC
** Package: ob-restclient
Makes REST calls from within org-mode as org-babel code block sections.
#+BEGIN_SRC elisp
;; From https://github.com/alf/ob-restclient.el
(require 'ob-restclient)
#+END_SRC

** Package: org-tree-slide
Present an org-mode document, one heading at a time.
#+BEGIN_SRC elisp
(defun my/presentation-setup ()
  (shell-command "dunstctl set-paused true")
  (flyspell-mode 0)
  (setq text-scale-mode-amount 3)
  (org-display-inline-images)
  (text-scale-mode 1)
  (font-lock-flush)
  (font-lock-ensure))

(defun my/presentation-end ()
  (shell-command "dunstctl set-paused false")
  (flyspell-mode 1)
  (text-scale-mode 0)
  (org-remove-inline-images)
  (font-lock-flush)
  (font-lock-ensure))

(use-package org-tree-slide
  ;; Load immediately, since it messes with org-mode faces
  :demand
  :hook
  ((org-tree-slide-play . my/presentation-setup)
   (org-tree-slide-stop . my/presentation-end))
  :bind
  (:map org-mode-map
        ("<f6>" . org-tree-slide-mode))
  :custom
  (org-image-actual-width nil)
  )
#+END_SRC

** Other configuration
*** Customize ellipsis display
Makes hide-show mode a bit more pretty (helps in presentations).

#+BEGIN_SRC elisp
;; customize the face as well
(defface hs-ellipsis
  '((((class color) (background light)) (:underline t))
    (((class color) (background dark)) (:underline t))
    (t (:underline t)))
  "Face for ellipsis in hideshow mode.")

;; Use this in whitespace-mode
(defun whitespace-change-ellipsis ()
  "Change ellipsis when used with `whitespace-mode'."
  (when buffer-display-table
    (set-display-table-slot buffer-display-table
                            'selective-display
                            ;;(string-to-vector " … ")
                            (let ((face-offset (* (face-id 'hs-ellipsis) (lsh 1 22))))
                              (vconcat (mapcar (lambda (c) (+ face-offset c)) " … ")))
                            )))
(add-hook 'whitespace-mode-hook #'whitespace-change-ellipsis)

;; Use this in non-whitespace modes
(set-display-table-slot
 standard-display-table
 'selective-display
 (let ((face-offset (* (face-id 'hs-ellipsis) (lsh 1 22))))
   (vconcat (mapcar (lambda (c) (+ face-offset c)) " … "))))

#+END_SRC

*** Show emphasis markers at point
This makes the bold, italic, etc. markers in org-mode disappear, /except/ when you're within them.

#+BEGIN_SRC elisp
;;https://www.reddit.com/r/orgmode/comments/43uuck/temporarily_show_emphasis_markers_when_the_cursor/
;; (adapted to also show verbatim markers)
(defun my/org-show-emphasis-markers-at-point ()
  (save-match-data
    (if (and (or (org-in-regexp org-emph-re 2) (org-in-regexp org-verbatim-re 2))
	     (>= (point) (match-beginning 3))
	     (<= (point) (match-end 4))
	     (member (match-string 3) (mapcar 'car org-emphasis-alist)))
	(with-silent-modifications
          (setq my/org-show-emphasis-hidden t)
	  (remove-text-properties
	   (match-beginning 3) (match-beginning 5)
	   '(invisible org-link)))
      (if my/org-show-emphasis-hidden
          (progn
            ;; Add about 100 characters extra, in case we're moving lines.
            (apply 'font-lock-flush (list (- (match-beginning 3) 100) (+ (match-beginning 5) 100)))
            (setq my/org-show-emphasis-hidden nil))))))
#+END_SRC
*** Image animation
Animate an image when hovering over it and pressing =a=.
#+BEGIN_SRC elisp
(defun my/image-animate ()
    "Starts to animate the image under the cursor"
    (interactive)
    (image-animate (image--get-imagemagick-and-warn)))

(define-key image-map (kbd "a") 'my/image-animate)
#+END_SRC

*** Org mode startup
#+BEGIN_SRC elisp
(defun my/org-mode-setup ()
  (whitespace-mode -1)

  ;; https://orgmode.org/list/87pn8huuq2.fsf@iki.fi/t/
  (electric-indent-local-mode -1)

  ;; Shorten some text
  (setq prettify-symbols-alist
        (map-merge 'list prettify-symbols-alist
                   `(
                     ("#+name:" . "✎")
                     ("#+NAME:" . "✎")
                     ("#+BEGIN_SRC" . "➤")
                     ("#+BEGIN_EXAMPLE" . "➤")
                     ("#+END_SRC" . "⏹")
                     ("#+END_EXAMPLE" . "⏹")
                     ("#+RESULTS:" . "🠋")
                     )))
  (prettify-symbols-mode 0)
  (prettify-symbols-mode)

  ;; Auto-wrap lines
  (visual-line-mode)
  (setq adaptive-wrap-extra-indent 2)

  (variable-pitch-mode)
  ;; from https://lepisma.xyz/2017/10/28/ricing-org-mode/
  ;; A little bit of space in the left/right margins:
  (setq left-margin-width 2)
  (setq right-margin-width 2)
  (set-window-buffer nil (current-buffer))

  (flyspell-mode 1)
  (ws-butler-mode 1)

  (defvar-local my/org-show-emphasis-hidden nil)
  (add-hook 'post-command-hook
	    'my/org-show-emphasis-markers-at-point nil t))
#+END_SRC

*** Miscellaneous
#+BEGIN_SRC elisp
;; fontify inside org mode
(setq org-src-fontify-natively t)

;; Don't indent org documents
(setq org-startup-indented nil)

#+END_SRC

* Wrapping up

- Try this yourself
  + Set goals, learn one package at a time

- Next steps
  + Org Babel for unit tests
  + Expand org babel for Java and Scala REPL (=jshell= and =ammonite=)
